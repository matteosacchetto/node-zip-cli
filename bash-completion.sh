# Subcommnds options
declare -A COMMANDS=(
  [_]="-h --help -v --version zip unzip tar untar find help"
  [help]="zip unzip tar untar find"
  [zip]="-v --version -i --input -d --deflate -o --output -k --keep-parent -s --symlink --disable-ignore -y --yes -e --exclude --allow-git --dry-run -h --help"
  [tar]="-v --version -i --input -g --gzip -o --output -k --keep-parent -s --symlink --disable-ignore -y --yes -e --exclude --allow-git --dry-run -h --help"
  [find]="-v --version -i --input -t --type -s --symlink --disable-ignore -e --exclude --allow-git --no-colors -h --help"
  [unzip]="-v --version -i --input -o --output -y --yes --dry-run -h --help"
  [untar]="-v --version -i --input -o --output -y --yes --dry-run -h --help"
)

# Options values
declare -A OPTIONS=(
  [symlink]="keep resolve none"
  [disable_ignore]="none zipignore gitignore ignore-files exclude-rules all"
  [compression_level]="0 1 2 3 4 5 6 7 8 9"
  [keep_parent]="full last none"
  [type]="d f l"
)

# Function used to retrieve the last used option
# Helpful for variadic options
_get_last_opt() {
  local last_opt=""
  for word in "${COMP_WORDS[@]}"; do
    if [[ "$word" =~ ^-{1,2}[^-]+$ ]]; then  # Matches -opt or --opt (but not just “-”)
      last_opt="$word"
    elif [[ "$word" =~ ^-.*$ ]]; then
      last_opt=""  # Reset if we see an option that doesn’t match the pattern above
    fi
  done

  printf "%s" "$last_opt"
}

# Function used to remove some options from a list
# e.g., _filter_opts "-a --option-1" "-a --option-1 -b --option-2" -> "-b --option-2"
_filter_opts() {
  local exclude=($1)
  local opts=($2)
  local filtered=()
  
  for opt in "${opts[@]}"; do
    [[ " ${exclude[@]} " =~ " $opt " ]] || filtered+=("$opt")
  done

  printf "%s\n" "${filtered[@]}"
}

# Sort the completion list generated by compgen so that first are listed the value
# then the short options then the long options
# e.g., _sort_completions "-v" "-h" "--version" "--help" "a" "b" -> "a b -h -v --help --version"
#       compgen -W "-v -h --version --help a b" -- "" | _sort_completions > "a b -h -v --help --version"
_sort_completions() {
  local nonflags=()
  local flags=()

  if [[ -p /dev/stdin ]]; then
    mapfile -t completions < /dev/stdin
  else
    completions=("$@")
  fi

  for item in "${completions[@]}"; do
    if [[ "$item" == -* ]]; then
      flags+=("$item")
    else
      nonflags+=("$item")
    fi
  done

  mapfile -t nonflags < <(printf "%s\n" "${nonflags[@]}" | sort -V)
  mapfile -t flags < <(printf "%s\n" "${flags[@]}" | sort -V)

  printf "%s\n" "${nonflags[@]}" "${flags[@]}"
}

__node-zip-cli_completion() {
  local prev=$(_get_pword)
  local cur=${COMP_WORDS[$COMP_CWORD]}
  local subcommand=${COMP_WORDS[1]}
  local last_opt=$(_get_last_opt)

  case $subcommand in
    zip|tar|find)
      # Options with (at most) one argument
      case $prev in
        -o|--output)
          case $subcommand in
            zip)
              _filedir '@(zip)'
              COMPREPLY=($(printf '%s\n' "${COMPREPLY[@]}" | sort -h))
              return 0
            ;;
            tar)
              _filedir '@(tar|tgz|tar.gz)'
              COMPREPLY=($(printf '%s\n' "${COMPREPLY[@]}" | sort -h))
              return 0
            ;;
          esac
          return 0
        ;;
        -k|--keep-parent)
          [[ $subcommand != "find" ]] && COMPREPLY=($(compgen -W "${OPTIONS[keep_parent]}" -- "$cur" | _sort_completions))
          return 0
        ;;
        -s|--symlink)
          case $subcommand in
            find)
              COMPREPLY=($(compgen -W "keep none" -- "$cur" | _sort_completions))
              return 0
            ;;
            zip|tar)
              COMPREPLY=($(compgen -W "${OPTIONS[symlink]} $(_filter_opts "-s --symlink" "${COMMANDS[$subcommand]}")" -- "$cur" | _sort_completions))
              return 0
            ;;
          esac
          return 0
        ;;
        --disable-ignore)
          COMPREPLY=($(compgen -W "${OPTIONS[disable_ignore]}  $(_filter_opts "--disable-ignore" "${COMMANDS[$subcommand]}")" -- "$cur" | _sort_completions))
          return 0
        ;;
        -d|--deflate)
          if [[ $subcommand == "zip" ]]; then
            COMPREPLY=($(compgen -W "${OPTIONS[compression_level]} $(_filter_opts "-d --deflate" "${COMMANDS[zip]}")" -- "$cur" | _sort_completions))
            return 0
          fi
        ;;
        -g|--gzip)
          if [[ $subcommand == "tar" ]]; then
            COMPREPLY=($(compgen -W "${OPTIONS[compression_level]} $(_filter_opts "-g --gzip" "${COMMANDS[tar]}")" -- "$cur" | _sort_completions))
            return 0
          fi
        ;;
        -t|--type)
          if [[ $subcommand == "find" ]]; then
            COMPREPLY=($(compgen -W "${OPTIONS[type]}" -- "$cur"));
            return 0
          fi
        ;;
      esac

      # Options with variadic arguments
      case $last_opt in
        -i|--input|-e|--exclude)
          _filedir
          COMPREPLY=( $(printf '%s\n' "${COMPREPLY[@]}" | sort -h) )
          return 0
        ;;
      esac
    ;;
    unzip|untar)
      # Options with (at most) one argument
      case $prev in
        -o|--output)
          _filedir
          COMPREPLY=( $(printf '%s\n' "${COMPREPLY[@]}" | sort -h) )
          return 0
        ;;
      esac

      # Options with variadic arguments
      case $last_opt in
        -i|--input)
          case $subcommand in
            unzip)
              _filedir '@(zip)'
              COMPREPLY=( $(printf '%s\n' "${COMPREPLY[@]}" | sort -h) )
              return 0
            ;;
            untar)
              _filedir '@(tar|tgz|tar.gz)'
              COMPREPLY=( $(printf '%s\n' "${COMPREPLY[@]}" | sort -h) )
              return 0
            ;;
          esac
          return 0
        ;;
      esac
    ;;
    *)
      # No subcommand provided, thus we use the default command completion
      subcommand="_"
    ;;
  esac

  # Fallback which handles subcommands completion
  COMPREPLY=($(compgen -W "${COMMANDS[$subcommand]}" -- "$cur" | _sort_completions))
}

# Complete but avoid sorting, as we do it manually
complete -F __node-zip-cli_completion -o nosort node-zip-cli
